@using SGJD_INA.Models.ViewModels;

@model AgregarAvisoViewModel

@{
    ViewBag.Title = "Agregar Aviso";
}

@* Codigo para enviar el valor de la vista para abrir el modal de ayuda en cada vista *@
<input type="hidden" id="nameView" value="AgreAvis" />

<div class="row mt-2">
    <div class="col s12 m4">
        <h6 class="seccion white-text truncate">
            <a title="Regresar" href="@Url.Action("Inicio", "Avisos")">
                <i class="fa fa-arrow-left white-text">&nbsp;</i>
            </a>
            Avisos
        </h6>
    </div>
    <div class="col s12 m8 hide-on-med-and-down">
        <nav class="transparent z-depth-0 breadcrumb">
            <div class="nav-wrapper right">
                <div class="col s12">
                    <a href="@Url.Action("Inicio", "Inicio")" class="breadcrumb">Inicio</a>
                    <a href="@Url.Action("Administracion", "Inicio")" class="breadcrumb">Módulo de Administración</a>
                    <a href="@Url.Action("Inicio", "Avisos")" class="breadcrumb">Avisos</a>
                </div>
            </div>
        </nav>
    </div>
</div>

<div class="row">
    <div class="col s12">
        <div class="card-panel">
            <div class="row">
                <div class="col s12 mb-1">
                    <span class="fz-1-2r font-bold">Agregar aviso</span>
                </div>
            </div>

            @using (Html.BeginForm("Agregar", "Avisos", FormMethod.Post, new { @id = "frmAgregarAviso", autocomplete = "off" })) {
                @Html.AntiForgeryToken()

                // Se guarda aqui los valores del campo para manipularlo y actualizarlo con los nuevos valores del
                // editor de texto antes de enviar a guardar los cambios
                @Html.HiddenFor(model => model.Mensaje)
                @Html.HiddenFor(model => model.Usuarios)

                // Nombre y tipo de aviso
                <div class="row mb-0">
                    <div class="col s12 m6">
                        <div class="input-field">
                            @Html.EditorFor(model => model.Nombre, new { htmlAttributes = new { @class = "validate", placeholder = "Nombre del aviso" } })
                            @Html.LabelFor(model => model.Nombre, new { @class = "active black-text" })
                            @Html.ValidationMessageFor(model => model.Nombre, "", new { @class = "helper-text" })
                        </div>
                    </div>

                    <div class="col s12 m6">
                        @Html.LabelFor(model => model.Tipo, new { @class = "po-relative font-bold" })
                        @Html.DropDownListFor(model => model.Tipo, new SelectList(ViewBag.TiposAviso, "Value", "Text"), "Seleccione un tipo de aviso", new { @class = "browser-default" })
                        @Html.ValidationMessageFor(model => model.Tipo, "", new { @class = "helper-text" })
                    </div>
                </div>

                // Tipo de destinatario, unidad y usuarios
                <div class="row">
                    <div class="col s12 m6">
                        @Html.LabelFor(model => model.TipoDestinatario, new { @class = "po-relative font-bold" })
                        @Html.DropDownListFor(model => model.TipoDestinatario, new SelectList(ViewBag.TiposDestinatario, "Value", "Text"), "Seleccione un tipo de destinatario", new { @class = "browser-default" })
                        @Html.ValidationMessageFor(model => model.TipoDestinatario, "", new { @class = "helper-text" })
                    </div>

                    <div class="col s12 m6" id="SelectorUnidad" hidden>
                        @Html.LabelFor(model => model.IdUnidad, new { @class = "po-relative display-block black-text font-bold" })
                        @Html.DropDownListFor(model => model.IdUnidad, new SelectList(ViewBag.Unidades, "Value", "Text"), new { @class = "browser-default" })
                    </div>
                </div>

                @* Administrar los usuarios de destino *@
                <div class="row mb-0" id="SelectorUsuarios" hidden>
                    <div class="col s12">
                        <h6 class="blue-text">Seleccionar usuarios destinatarios</h6>

                        <div class="row">
                            <div class="col s12 m6">
                                <label class="black-text">Usuarios activos</label>
                                <table id="TablaUsuarios" class="table compact width-100">
                                    <thead style="display: none;">
                                    </thead>
                                </table>
                            </div>

                            <div class="col s12 m6">
                                <label class="black-text">Usuarios seleccionados para recibir el aviso</label>
                                <table id="TablaDestinatarios" class="table compact width-100">
                                    <thead style="display: none;">
                                    </thead>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>

                // Mensaje
                <div class="row">
                    <div class="col s12">
                        @Html.LabelFor(model => model.Mensaje, new { @class = "po-relative font-bold black-text" })
                    </div>

                    <div class="col s12">
                        <div id="EditorMensaje"></div>
                    </div>
                </div>

                <div class="row">
                    <div class="col s12">
                        <div class="input-field red-text font-bold">
                            @Html.ValidationSummary(true, "", new { @class = "data-error" })
                        </div>
                    </div>

                    <div class="col s12">
                        <button type="submit" id="AgregarAviso" title="Agregar" value="Agregar" class="btn btn-small yellow black-text waves-effect waves-light font-bold">
                            <span class="font-bold">Agregar</span>
                        </button>

                        <a title="Cancelar" id="Cancelar" href='@Url.Action("Inicio", "Avisos" )' class="btn btn-small grey lighten-3 red-text waves-effect">
                            Cancelar
                        </a>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@Styles.Render("~/Content/jquerydatatable")
@Styles.Render("~/Content/jquerydatatableresponsive")
@Styles.Render("~/Content/quill")

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/jquerydatatable")
    @Scripts.Render("~/bundles/jquerydatatableresponsive")
    @Scripts.Render("~/bundles/quill")

    <script type="text/javascript">
        // Definición de objetos para cargar el editor de texto enriquecido WYSIWYG QuillJS
        var EditorMensaje = new Quill('#EditorMensaje', OpcionesQuillJS);

        $(document).ready(function () {
            $("#TipoDestinatario").change(function (e) {
                ValidarTipoDestinatarioSeleccionado(this);
            });

            // Cargar tabla con usuarios activos del sistema
            CargarDataTableUsuarios();

            // Cargar tabla con usuarios destinatarios
            CargarDataTableDestinatarios();
        });

        // Función para controlar la aparición del selector de Unidad o de Usuarios del tipo de
        // destinatarios del aviso, controlar la aparición del selector de Unidad o de Usuarios y establecer el valor del
        // atributo tipoDestinatario  basado en el radio seleccionado
        function ValidarTipoDestinatarioSeleccionado(element) {
            let ValueSelected = element.value;

            if (ValueSelected === 'Unidad') {
                // Mostrar selector de Unidad y ocultar selector de Usuarios
                $("#SelectorUnidad").show("slideDown");
                $("#SelectorUsuarios").hide("slideUp");
            }
            else if (ValueSelected === 'Usuarios') {
                // Mostrar selector de Usuarios y ocultar selector de Unidad
                $("#SelectorUnidad").hide("slideUp");
                $("#SelectorUsuarios").show("slideDown");
            }
            else {
                $("#SelectorUnidad").hide("slideUp");
                $("#SelectorUsuarios").hide("slideDown");
            }
        }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        // Selección de usuarios destinatarios
        ////////////////////////////////////////////////////////////////////////////////////////////////////
        var TablaUsuarios;
        var TablaDestinatarios;
        var JsonUsuarios = new Array();
        var JsonDestinatarios = new Array();
        var ListaUsuarios = new Array();

        // Cargar los usuarios activos del sistema
        function CargarDataTableUsuarios() {
            const ParametrosAJAXUsuarios = {
                url: '@Url.Action("ObtenerTodosActivos", "Usuario")',
                type: "GET",
                datatype: "json",
                error: MostrarMensajeError,
                dataSrc: function (json) {
                    // Llenar el objeto JsonUsuarios con lo obtenido en la petición AJAX
                    for (let i = 0; i < json.data.length; i++) {
                        JsonUsuarios.push({
                            'Id': json.data[i].Id,
                            'Nombre': json.data[i].Nombre
                        })
                    }

                    return JsonUsuarios;
                }
            };

            TablaUsuarios = $("#TablaUsuarios").DataTable({
                ajax: ParametrosAJAXUsuarios,
                columns: [{
                    className: "no-wrap", render: function (data, type, row) {
                        //El nombre debe tratarse antes de ser incrustado en el evento OnClick ya que normalmente al construirse los parámetros de la
                        //función en el primer espacio inserta ", por lo que los espacios se sustituyen por _
                        let idUsuario = row['Id'];
                        let nombre = row['Nombre'].trim().replace(/\s+/g, '_');
                        let nombreUsuario = row['Nombre'];
                        return "<a class='btn btn-small grey lighten-3 waves-effect waves-red black-text text-left width-100' title='Agregar' onclick=AgregarDestinatario('" + idUsuario + "','" + nombre + "')><i class='fa fa-caret-right blue-text right'></i>" + nombreUsuario + "</a>";
                    }
                }],
                language: parametrosLenguajeDataTable,
                pagingType: "numbers",
                searching: false,
                sorting: false,
                responsive: false,
                info: false,
                pageLength: 5,
                autoWidth: true,
                lengthChange: false,
                ordering: true,
                filtering: false
            });
        }

        // Cargar tabla de destinatarios
        function CargarDataTableDestinatarios() {
            TablaDestinatarios = $("#TablaDestinatarios").DataTable({
                data: JsonDestinatarios,
                columns: [{
                    className: "no-wrap", render: function (data, type, row) {
                        //El nombre debe tratarse antes de ser incrustado en el evento OnClick ya que normalmente al construirse los parámetros de la
                        //función en el primer espacio inserta ", por lo que los espacios se sustituyen por _
                        let idDestinatario = row['Id'];
                        let nombre = row['Nombre'].trim().replace(/\s+/g, '_');
                        let nombreDestinatario = row['Nombre'];
                        return "<a class='btn btn-small grey lighten-3 waves-effect waves-red black-text text-left width-100' title='Quitar' onclick=QuitarDestinatario('" + idDestinatario + "','" + nombre + "')><i class='fa fa-caret-left red-text left'></i>" + nombreDestinatario + "</a>";
                    }
                }],
                language: parametrosLenguajeDataTable,
                pagingType: "numbers",
                searching: false,
                sorting: false,
                responsive: false,
                info: false,
                pageLength: 5,
                autoWidth: true,
                lengthChange: false,
                ordering: true,
                filtering: false
            });
        }

        // Agregar un usuario de la lista de usuario al array de usuariosDestino y a la tabla para su visualización
        function AgregarDestinatario(IdUsuario, NombreUsuario) {
            // Quitar usuario del arreglo de usuarios
            JsonUsuarios.forEach(function (currentValue, index, arr) {
                if (JsonUsuarios[index].Id == IdUsuario) {
                    JsonUsuarios.splice(index, 1);
                }
            })

            // Actualizar la tabla de usuarios con el array actualizado
            TablaUsuarios.clear();
            TablaUsuarios.rows.add(JsonUsuarios);
            TablaUsuarios.draw();

            // Agregar destinatario al JSON de destinatarios
            // El nombre debe tratarse antes de ser insertado en el Json array, ya que viene con _ en vez de espacios y para mostrarlo en el botón
            // correctamente se reemplaza los _ con espacio
            JsonDestinatarios.push({
                'Id': IdUsuario,
                'Nombre': NombreUsuario.replace(/_/g, ' ')
            })

            ListaUsuarios.push(IdUsuario);

            //Actualizar la tabla de destinatarios con el array actualizado
            TablaDestinatarios.clear();
            TablaDestinatarios.rows.add(JsonDestinatarios);
            TablaDestinatarios.draw();
        }

        function QuitarDestinatario(IdMiembro, NombreMiembro) {
            // Quitar destinatario del arreglo de destinatarios
            JsonDestinatarios.forEach(function (currentValue, index, arr) {
                if (JsonDestinatarios[index].Id == IdMiembro) {
                    JsonDestinatarios.splice(index, 1);
                }
            })

            // Actualizar la tabla de destinatarios con el array actualizado
            TablaDestinatarios.clear();
            TablaDestinatarios.rows.add(JsonDestinatarios);
            TablaDestinatarios.draw();

            // Agregar usuario
            // El nombre debe tratarse antes de ser insertado en el Json array, ya que viene con _ en vez de espacios y para mostrarlo en el botón
            // correctamente se reemplaza los _ con espacio
            JsonUsuarios.push({
                'Id': IdMiembro,
                'Nombre': NombreMiembro.replace(/_/g, ' ')
            })

            // Actualizar la tabla de usuarios con el array actualizado
            TablaUsuarios.clear();
            TablaUsuarios.rows.add(JsonUsuarios);
            TablaUsuarios.draw();
        }

        // Antes de realizar el submit, llenas los valores de encabezado y pie con el contenido del editor de texto
        $('#frmAgregarAviso').submit(function (e) {
            // Obtener el valor del editor, incluyendo formato HTML y guardarlo en los inputs establecidos en Razor
            $("#Mensaje").val(EditorMensaje.root.innerHTML);

            // Verificar si se seleccionó tipo de destinatario "Usuario" que la lista de destinataraios no esté vacía
            let ValueSelected = $("#TipoDestinatario").val();

            if (ValueSelected === 'Usuarios') {
                if (JsonDestinatarios.length <= 0) {
                    MostrarMensajeError("Debe seleccionar usuarios para recibir el aviso");
                    e.preventDefault();
                }
                else {
                    $("#Usuarios").val(ListaUsuarios);
                }
            }
        });

        //Agregar un Aviso
        //Enviar información del formulario al servidor utilizando AJAX.
        function SubmitFormAgregar(form) {

            // Valida que los campos del formulario estén llenos y tengan valores correctos
            $.validator.unobtrusive.parse(form);

            if ($(form).valid()) {
                // Construir objeto del modelo de Avisos
                var modeloAviso = {
                    Id: 0,
                    Nombre: $("#Nombre").val(),
                    Mensaje: encodeURIComponent($("#MensajeEditor").html()),
                    TipoDestinatario: $("#TipoDestinatario").val(),
                    // Si el radio de lista de usuarios está seleccionado, la unidad es enviada como null
                    IdUnidad: ($("#Usuario").is(':checked')) ? null : $("#IdUnidad").select().val(),
                    Tipo: $("#Tipo").val()
                };

                $.ajax({
                    type: "POST",
                    dataType: "json",
                    url: form.action,
                    data: {
                        __RequestVerificationToken: token,
                        avisoJson: JSON.stringify(modeloAviso),
                        listaUsuariosJson: JSON.stringify(jsonDestinatarios)
                    },
                    success: function (data) {
                        if (data.success) {
                            // Redirigir a inicio, indicando en el parametro que se creó el usuario
                            var url = '@Url.Action("Inicio", "Avisos", new { avisoCreado = 1 })';
                            window.location.href = url;
                        } else {
                            MostrarMensajeError(data.message); // Notificar error
                        }
                    },
                    error: function () {
                        MostrarMensajeError("Error al procesar la información."); // Notificar error
                    }
                });
            }
            return false;
        }
    </script>

    @* Se llama en esta posición puesto que necesita que primero se ejecute el script local *@
    @Scripts.Render("~/bundles/quillextra")
}