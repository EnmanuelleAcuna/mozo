@using SGJD_INA.Models.ViewModels

@model AgregarTomoViewModel

@{
    ViewBag.Title = "Apertura de Tomo";
}

@* Codigo para enviar el valor de la vista para abrir el modal de ayuda en cada vista *@
<input type="hidden" id="nameView" value="AperAud" />

<div class="row mt-2">
    <div class="col s12 m4">
        <h6 class="seccion white-text truncate">
            <a title="Regresar" href="@Url.Action("Tomos", "Auditoria")">
                <i class="fa fa-arrow-left white-text">&nbsp;</i>
            </a>
            Libro de Actas
        </h6>
    </div>
    <div class="col s12 m8 hide-on-med-and-down">
        <nav class="transparent z-depth-0 breadcrumb">
            <div class="nav-wrapper right">
                <div class="col s12">
                    <a href="@Url.Action("Inicio", "Inicio")" class="breadcrumb">Inicio</a>
                    <a href="@Url.Action("Actas", "Inicio")" class="breadcrumb">Módulo de Actas</a>
                    <a href="@Url.Action("Tomos", "Auditoria")" class="breadcrumb">Libro de Actas</a>
                </div>
            </div>
        </nav>
    </div>
</div>

<div class="row">
    <div class="col s12">
        <div class="card-panel">
            @using (Html.BeginForm("AperturaTomo", "Auditoria", FormMethod.Post, new { id = "frmAperturaTomo", autocomplete = "off" })) {
                @Html.AntiForgeryToken()

                <div class="row">
                    <div class="col s12 m8 mb-1">
                        <span class="fz-1-2r font-bold">
                            Apertura de Tomo @Model.ConsecutivoTomo
                        </span>
                    </div>
                </div>
                <div class="row mb-0">
                    @*Nombre de libro *@
                    <div class="col s12 m6">
                        <div class="input-field">
                            @Html.EditorFor(model => model.NombreLibro, new { htmlAttributes = new { @class = "validate", @readonly = true } })
                            @Html.LabelFor(model => model.NombreLibro, new { @class = "black-text" })
                        </div>
                    </div>

                    @* Nombre de la unidad ejecutora *@
                    <div class="col s12 m6">
                        <div class="input-field">
                            @Html.EditorFor(model => model.NombreUnidad, new { htmlAttributes = new { @class = "validate", @readonly = true } })
                            @Html.LabelFor(model => model.NombreUnidad, new { @class = "black-text active" })
                        </div>
                    </div>

                    @* Nombre del usuario (auditor interno) *@
                    <div class="col s12 m6">
                        <div class="input-field">
                            @Html.TextBox("UsuarioApertura", User.NombreCompleto(), new { disabled = "disabled" })
                            @Html.Label("UsuarioApertura", "Auditor(a) Interno(a)", new { @class = "black-text" })
                        </div>
                    </div>

                    @* Fecha de apertura *@
                    <div class="col s12 m6">
                        <div class="input-field">
                            @Html.LabelFor(model => model.FechaApertura, new { @class = "active black-text" })
                            @Html.TextBoxFor(model => model.FechaApertura, "{0:dd/MM/yyyy}", new { @class = "datepicker validate" })
                            @Html.ValidationMessageFor(model => model.FechaApertura, "", new { @class = "helper-text" })
                        </div>
                    </div>
                </div>

                <div class="row">
                    @* Numero de asiento *@
                    <div class="col s12 m3">
                        <div class="input-field">
                            @Html.EditorFor(model => model.Asiento, new { htmlAttributes = new { @class = "validate", @autocomplete = "off" } })
                            @Html.LabelFor(model => model.Asiento, new { @class = "black-text" })
                            @Html.ValidationMessageFor(model => model.Asiento, "", new { @class = "helper-text" })
                        </div>
                    </div>

                    @* Observacion de apertura *@
                    <div class="input-field col s12 mb-0">
                        @Html.TextAreaFor(model => model.ObservacionApertura, new { @class = "validate materialize-textarea" })
                        @Html.LabelFor(model => model.ObservacionApertura, new { @class = "black-text" })
                        @Html.ValidationMessageFor(model => model.ObservacionApertura, "", new { @class = "helper-text" })
                    </div>
                </div>

                <div class="row">
                    <div class="col s12">
                        <div class="input-field red-text font-bold">
                            @Html.ValidationSummary(true, "", new { @class = "data-error" })
                        </div>
                    </div>

                    <div class="col s12">
                        <button type="submit" title="Agregar" value="Agregar" id="AperturarTomo" class="btn btn-small yellow black-text waves-effect waves-light font-bold">
                            Aperturar
                        </button>

                        <a title="Cancelar" id="Cancelar" href="@Url.Action("Tomos", "Auditoria")" class="btn btn-small grey lighten-3 red-text waves-effect">
                            Cancelar
                        </a>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/jqueryui")

    <script type="text/javascript">
        $(document).ready(function () {
            // Sobreescribir validador de jQuery para que verifique el formato de fecha
            // Se coloca acá ya que para que funcione, en la vista se debe cargar primero jqueryval
            $.validator.addMethod('date', function (value, element) {
                if (this.optional(element)) {
                    return true;
                }
                var valid = true;
                try {
                    $.datepicker.parseDate('dd/mm/yy', value);
                }
                catch (err) {
                    valid = false;
                }
                return valid;
            });
        });
    </script>
}